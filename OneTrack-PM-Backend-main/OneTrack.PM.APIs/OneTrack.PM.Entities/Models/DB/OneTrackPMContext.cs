// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace OneTrack.PM.Entities.Models.DB
{
    public partial class OneTrackPMContext : DbContext
    {
        public OneTrackPMContext()
        {
        }

        public OneTrackPMContext(DbContextOptions<OneTrackPMContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ProjectPlan> ProjectPlans { get; set; }

        public virtual DbSet<FinCost> FinCosts { get; set; }
        public virtual DbSet<FinCostAttachment> FinCostAttachments { get; set; }
        public virtual DbSet<FinCostCenter> FinCostCenters { get; set; }
        public virtual DbSet<FinCostDetail> FinCostDetails { get; set; }
        public virtual DbSet<FinCostItem> FinCostItems { get; set; }
        public virtual DbSet<FinInvoiceAttachment> FinInvoiceAttachments { get; set; }
        public virtual DbSet<FinProjectSupplyOrder> FinProjectSupplyOrders { get; set; }
        public virtual DbSet<FinSupplyOrderAttachment> FinSupplyOrderAttachments { get; set; }
        public virtual DbSet<FinSupplyOrderInvoice> FinSupplyOrderInvoices { get; set; }
        public virtual DbSet<LtCity> LtCities { get; set; }
        public virtual DbSet<LtCollectionStatus> LtCollectionStatuses { get; set; }
        public virtual DbSet<LtCountry> LtCountries { get; set; }
        public virtual DbSet<LtCurrency> LtCurrencies { get; set; }
        public virtual DbSet<LtDocType> LtDocTypes { get; set; }
        public virtual DbSet<LtGovernorate> LtGovernorates { get; set; }
        public virtual DbSet<LtInvoiceStatus> LtInvoiceStatuses { get; set; }
        public virtual DbSet<LtStatus> LtStatuses { get; set; }
        public virtual DbSet<PmProject> PmProjects { get; set; }
        public virtual DbSet<PmProjectAttachment> PmProjectAttachments { get; set; }
        public virtual DbSet<PmProjectPlan> PmProjectPlans { get; set; }
        public virtual DbSet<PmProjectPlanAttachment> PmProjectPlanAttachments { get; set; }
        public virtual DbSet<PmStandardTask> PmStandardTasks { get; set; }
        public virtual DbSet<SecActionType> SecActionTypes { get; set; }
        public virtual DbSet<SecContact> SecContacts { get; set; }
        public virtual DbSet<SecContactAddress> SecContactAddresses { get; set; }
        public virtual DbSet<SecContactGender> SecContactGenders { get; set; }
        public virtual DbSet<SecContactImage> SecContactImages { get; set; }
        public virtual DbSet<SecContactJobTitle> SecContactJobTitles { get; set; }
        public virtual DbSet<SecContactPhone> SecContactPhones { get; set; }
        public virtual DbSet<SecContactRole> SecContactRoles { get; set; }
        public virtual DbSet<SecContactRoleGroup> SecContactRoleGroups { get; set; }
        public virtual DbSet<SecContactRolesLink> SecContactRolesLinks { get; set; }
        public virtual DbSet<SecContactType> SecContactTypes { get; set; }
        public virtual DbSet<SecFormActionType> SecFormActionTypes { get; set; }
        public virtual DbSet<SecFormActionTypeAttachment> SecFormActionTypeAttachments { get; set; }
        public virtual DbSet<SecGroup> SecGroups { get; set; }
        public virtual DbSet<SecGroupAction> SecGroupActions { get; set; }
        public virtual DbSet<SecJobTitle> SecJobTitles { get; set; }
        public virtual DbSet<SecMainModule> SecMainModules { get; set; }
        public virtual DbSet<SecMainModuleAttachment> SecMainModuleAttachments { get; set; }
        public virtual DbSet<SecModule> SecModules { get; set; }
        public virtual DbSet<SecModuleAttachment> SecModuleAttachments { get; set; }
        public virtual DbSet<SecModuleForm> SecModuleForms { get; set; }
        public virtual DbSet<SecModuleFormAttachment> SecModuleFormAttachments { get; set; }
        public virtual DbSet<SecTitle> SecTitles { get; set; }
        public virtual DbSet<SecUser> SecUsers { get; set; }
        public virtual DbSet<SecUsersLogin> SecUsersLogins { get; set; }
        public virtual DbSet<SecUsersRefreshToken> SecUsersRefreshTokens { get; set; }
        public virtual DbSet<SysExceptionLog> SysExceptionLogs { get; set; }
        public virtual DbSet<SysSetting> SysSettings { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<FinCost>(entity =>
            {
                entity.ToTable("FIN_Costs");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.FinCostCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ec_costs_sec_users");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.FinCosts)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_Costs_LT_Currencies");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.FinCostModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ec_costs_sec_users1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.FinCosts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_PM_Costs_PM_Projects");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.FinCosts)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_Costs_LT_Status");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.FinCosts)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ec_costs_sec_contacts");
            });

            modelBuilder.Entity<FinCostAttachment>(entity =>
            {
                entity.ToTable("FIN_CostAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.Cost)
                    .WithMany(p => p.FinCostAttachments)
                    .HasForeignKey(d => d.CostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_CostAttachments_PM_Costs");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.FinCostAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_PM_CostAttachments_LT_DocTypes");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.FinCostAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_CostAttachments_SEC_Users");
            });

            modelBuilder.Entity<FinCostCenter>(entity =>
            {
                entity.ToTable("FIN_CostCenters");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.FinCostCenters)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_CostCenters_LT_Status");
            });

            modelBuilder.Entity<FinCostDetail>(entity =>
            {
                entity.ToTable("FIN_CostDetails");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.FinCostDetails)
                    .HasForeignKey(d => d.CostCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ec_cost_details_ec_cost_centers");

                entity.HasOne(d => d.Cost)
                    .WithMany(p => p.FinCostDetails)
                    .HasForeignKey(d => d.CostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_CostDetails_PM_Costs");

                entity.HasOne(d => d.CostItem)
                    .WithMany(p => p.FinCostDetails)
                    .HasForeignKey(d => d.CostItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ec_cost_details_ec_cost_items");
            });

            modelBuilder.Entity<FinCostItem>(entity =>
            {
                entity.ToTable("FIN_CostItems");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FinInvoiceAttachment>(entity =>
            {
                entity.ToTable("FIN_InvoiceAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.FinInvoiceAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_PM_InvoiceAttachments_LT_DocTypes");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.FinInvoiceAttachments)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_InvoiceAttachments_PM_SupplyOrderInvoices");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.FinInvoiceAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_InvoiceAttachments_SEC_Users");
            });

            modelBuilder.Entity<FinProjectSupplyOrder>(entity =>
            {
                entity.ToTable("FIN_ProjectSupplyOrders");

                entity.Property(e => e.AddedValue).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.FinProjectSupplyOrderCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectSupplyOrders_SEC_Users");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.FinProjectSupplyOrders)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectSupplyOrders_LT_Currencies");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.FinProjectSupplyOrderModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PM_ProjectSupplyOrders_SEC_Users1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.FinProjectSupplyOrders)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectSupplyOrders_PM_Projects");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.FinProjectSupplyOrders)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectSupplyOrders_LT_Status");
            });

            modelBuilder.Entity<FinSupplyOrderAttachment>(entity =>
            {
                entity.ToTable("FIN_SupplyOrderAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.FinSupplyOrderAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_FIN_SupplyOrderAttachments_LT_DocTypes");

                entity.HasOne(d => d.SupplyOrder)
                    .WithMany(p => p.FinSupplyOrderAttachments)
                    .HasForeignKey(d => d.SupplyOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_SupplyOrderAttachments_PM_ProjectSupplyOrders");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.FinSupplyOrderAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_SupplyOrderAttachments_SEC_Users");
            });

            modelBuilder.Entity<FinSupplyOrderInvoice>(entity =>
            {
                entity.ToTable("FIN_SupplyOrderInvoices");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ElectronicInvoiceDate).HasColumnType("date");

                entity.Property(e => e.ElectronicInvoiceReference)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.HasOne(d => d.CollectionStatus)
                    .WithMany(p => p.FinSupplyOrderInvoices)
                    .HasForeignKey(d => d.CollectionStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_SupplyOrderInvoices_LT_CollectionStatus");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.FinSupplyOrderInvoiceCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_SupplyOrderInvoices_SEC_Users");

                entity.HasOne(d => d.InvoiceStatus)
                    .WithMany(p => p.FinSupplyOrderInvoices)
                    .HasForeignKey(d => d.InvoiceStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_SupplyOrderInvoices_LT_InvoiceStatus");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.FinSupplyOrderInvoiceModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_FIN_SupplyOrderInvoices_SEC_Users1");

                entity.HasOne(d => d.SupplyOrder)
                    .WithMany(p => p.FinSupplyOrderInvoices)
                    .HasForeignKey(d => d.SupplyOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FIN_SupplyOrderInvoices_PM_ProjectSupplyOrders");
            });

            modelBuilder.Entity<LtCity>(entity =>
            {
                entity.ToTable("LT_Cities");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Governorate)
                    .WithMany(p => p.LtCities)
                    .HasForeignKey(d => d.GovernorateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LuCities_LuGovernorates");
            });

            modelBuilder.Entity<LtCollectionStatus>(entity =>
            {
                entity.ToTable("LT_CollectionStatus");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LtCountry>(entity =>
            {
                entity.ToTable("LT_Countries");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LtCurrency>(entity =>
            {
                entity.ToTable("LT_Currencies");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ConversionRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtCurrencies)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LT_Currencies_LT_Countries");
            });

            modelBuilder.Entity<LtDocType>(entity =>
            {
                entity.ToTable("LT_DocTypes");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LtGovernorate>(entity =>
            {
                entity.ToTable("LT_Governorates");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtGovernorates)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LuGovernorates_LuCountries");
            });

            modelBuilder.Entity<LtInvoiceStatus>(entity =>
            {
                entity.ToTable("LT_InvoiceStatus");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LtStatus>(entity =>
            {
                entity.ToTable("LT_Status");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PmProject>(entity =>
            {
                entity.ToTable("PM_Projects");

                entity.Property(e => e.ActualEndDate).HasColumnType("date");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.MainContractorReference)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.PmProjectClients)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_Projects_SEC_Contacts1");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PmProjectCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_Projects_SEC_Users");

                entity.HasOne(d => d.IntermediaryContractor)
                    .WithMany(p => p.PmProjectIntermediaryContractors)
                    .HasForeignKey(d => d.IntermediaryContractorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_Projects_SEC_Contacts2");

                entity.HasOne(d => d.MainContractor)
                    .WithMany(p => p.PmProjectMainContractors)
                    .HasForeignKey(d => d.MainContractorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_Projects_SEC_Contacts");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.PmProjectModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PM_Projects_SEC_Users1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PmProjects)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_Projects_LT_Status");
            });

            modelBuilder.Entity<PmProjectAttachment>(entity =>
            {
                entity.ToTable("PM_ProjectAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.PmProjectAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_PM_ProjectAttachments_LT_DocTypes");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.PmProjectAttachments)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectAttachments_PM_Projects");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.PmProjectAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectAttachments_SEC_Users");
            });

            modelBuilder.Entity<PmProjectPlan>(entity =>
            {
                entity.ToTable("PM_ProjectPlan");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.Progress).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.StandardTask)
                    .WithMany(p => p.PmProjectPlans)
                    .HasForeignKey(d => d.StandardTaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectPlan_PM_StandardTasks");
            });

            modelBuilder.Entity<PmProjectPlanAttachment>(entity =>
            {
                entity.ToTable("PM_ProjectPlanAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.PmProjectPlanAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_PM_ProjectPlanAttachments_LT_DocTypes");

                entity.HasOne(d => d.ProjectPlan)
                    .WithMany(p => p.PmProjectPlanAttachments)
                    .HasForeignKey(d => d.ProjectPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectPlanAttachments_PM_ProjectPlan");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.PmProjectPlanAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_ProjectPlanAttachments_SEC_Users");
            });

            modelBuilder.Entity<PmStandardTask>(entity =>
            {
                entity.ToTable("PM_StandardTasks");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.RelativeWeight).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Task)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PmStandardTaskCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_StandardTasks_SEC_Users");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.PmStandardTaskModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PM_StandardTasks_SEC_Users1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.PmStandardTasks)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PM_StandardTasks_PM_Projects");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PmStandardTasks)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tasks_Status");
            });

            modelBuilder.Entity<SecActionType>(entity =>
            {
                entity.ToTable("SEC_ActionTypes");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SecContact>(entity =>
            {
                entity.ToTable("SEC_Contacts");

                entity.Property(e => e.Avatar).HasMaxLength(100);

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.NationalId).HasMaxLength(14);

                entity.Property(e => e.NormalizedFullName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.ContactType)
                    .WithMany(p => p.SecContacts)
                    .HasForeignKey(d => d.ContactTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contacts_ContactTypes");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.SecContacts)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("FK_contacts_contact_gender");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SecContacts)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecContacts_LuStatus");

                entity.HasOne(d => d.Title)
                    .WithMany(p => p.SecContacts)
                    .HasForeignKey(d => d.TitleId)
                    .HasConstraintName("FK_SecContacts_SecTitles");
            });

            modelBuilder.Entity<SecContactAddress>(entity =>
            {
                entity.ToTable("SEC_ContactAddresses");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BuildingNo).HasMaxLength(10);

                entity.Property(e => e.Latitude).HasMaxLength(50);

                entity.Property(e => e.Longitude).HasMaxLength(50);

                entity.Property(e => e.NearestHallmark).HasMaxLength(100);

                entity.Property(e => e.Phone).HasMaxLength(15);

                entity.Property(e => e.Street).HasMaxLength(100);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.SecContactAddresses)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_SecContactAddresses_LuCities");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.SecContactAddresses)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactAddresses_Contacts");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.SecContactAddresses)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_SecContactAddresses_LuCountries");

                entity.HasOne(d => d.Governorate)
                    .WithMany(p => p.SecContactAddresses)
                    .HasForeignKey(d => d.GovernorateId)
                    .HasConstraintName("FK_SecContactAddresses_LuGovernorates");
            });

            modelBuilder.Entity<SecContactGender>(entity =>
            {
                entity.ToTable("SEC_ContactGender");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<SecContactImage>(entity =>
            {
                entity.ToTable("SEC_ContactImages");

                entity.Property(e => e.Caption).HasMaxLength(50);

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.SecContactImages)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_contact_images_contacts");
            });

            modelBuilder.Entity<SecContactJobTitle>(entity =>
            {
                entity.ToTable("SEC_ContactJobTitles");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.SecContactJobTitleContacts)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecContactJobTitles_SecContacts");

                entity.HasOne(d => d.Entity)
                    .WithMany(p => p.SecContactJobTitleEntities)
                    .HasForeignKey(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecContactJobTitles_SecContacts1");

                entity.HasOne(d => d.JobTitle)
                    .WithMany(p => p.SecContactJobTitles)
                    .HasForeignKey(d => d.JobTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecContactJobTitles_SecJobTitles");
            });

            modelBuilder.Entity<SecContactPhone>(entity =>
            {
                entity.ToTable("SEC_ContactPhones");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.SecContactPhones)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactPhones_Contacts");
            });

            modelBuilder.Entity<SecContactRole>(entity =>
            {
                entity.ToTable("SEC_ContactRoles");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SecContactRoleGroup>(entity =>
            {
                entity.ToTable("SEC_ContactRoleGroups");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.SecContactRoleGroups)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_contact_role_groups_contact_roles");
            });

            modelBuilder.Entity<SecContactRolesLink>(entity =>
            {
                entity.ToTable("SEC_ContactRolesLink");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.SecContactRolesLinks)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactRolesLink_Contacts");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.SecContactRolesLinks)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactRolesLink_ContactRoles");
            });

            modelBuilder.Entity<SecContactType>(entity =>
            {
                entity.ToTable("SEC_ContactTypes");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<SecFormActionType>(entity =>
            {
                entity.ToTable("SEC_FormActionTypes");

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.HasOne(d => d.ActionType)
                    .WithMany(p => p.SecFormActionTypes)
                    .HasForeignKey(d => d.ActionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FormActivityTypes_ActivityTypes");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.SecFormActionTypes)
                    .HasForeignKey(d => d.FormId)
                    .HasConstraintName("FK_FormActivityTypes_ModuleForms");
            });

            modelBuilder.Entity<SecFormActionTypeAttachment>(entity =>
            {
                entity.ToTable("SEC_FormActionTypeAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.SecFormActionTypeAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_SEC_FormActionTypeAttachments_LT_DocTypes");

                entity.HasOne(d => d.FormActionType)
                    .WithMany(p => p.SecFormActionTypeAttachments)
                    .HasForeignKey(d => d.FormActionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_FormActionTypeAttachments_SEC_FormActionTypes");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.SecFormActionTypeAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_FormActionTypeAttachments_SEC_Users");
            });

            modelBuilder.Entity<SecGroup>(entity =>
            {
                entity.ToTable("SEC_Groups");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.MainModule)
                    .WithMany(p => p.SecGroups)
                    .HasForeignKey(d => d.MainModuleId)
                    .HasConstraintName("FK_Groups_MainModules");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SecGroups)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecGroups_LuStatus");
            });

            modelBuilder.Entity<SecGroupAction>(entity =>
            {
                entity.ToTable("SEC_GroupActions");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.HasOne(d => d.FormActionType)
                    .WithMany(p => p.SecGroupActions)
                    .HasForeignKey(d => d.FormActionTypeId)
                    .HasConstraintName("FK_GroupActivities_FormActivityTypes");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.SecGroupActions)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_GroupActivities_Groups");
            });

            modelBuilder.Entity<SecJobTitle>(entity =>
            {
                entity.ToTable("SEC_JobTitles");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SecJobTitles)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecJobTitles_LuStatus");
            });

            modelBuilder.Entity<SecMainModule>(entity =>
            {
                entity.ToTable("SEC_MainModules");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.SecMainModules)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_SEC_MainModules_PM_Projects");
            });

            modelBuilder.Entity<SecMainModuleAttachment>(entity =>
            {
                entity.ToTable("SEC_MainModuleAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.SecMainModuleAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_SEC_MainModuleAttachments_LT_DocTypes");

                entity.HasOne(d => d.MainModule)
                    .WithMany(p => p.SecMainModuleAttachments)
                    .HasForeignKey(d => d.MainModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_MainModuleAttachments_SEC_MainModules");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.SecMainModuleAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_MainModuleAttachments_SEC_Users");
            });

            modelBuilder.Entity<SecModule>(entity =>
            {
                entity.ToTable("SEC_Modules");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Icon).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.MainModule)
                    .WithMany(p => p.SecModules)
                    .HasForeignKey(d => d.MainModuleId)
                    .HasConstraintName("FK_Modules_MainModules");
            });

            modelBuilder.Entity<SecModuleAttachment>(entity =>
            {
                entity.ToTable("SEC_ModuleAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.SecModuleAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_SEC_ModuleAttachments_LT_DocTypes");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.SecModuleAttachments)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_ModuleAttachments_SEC_Modules");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.SecModuleAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_ModuleAttachments_SEC_Users");
            });

            modelBuilder.Entity<SecModuleForm>(entity =>
            {
                entity.ToTable("SEC_ModuleForms");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.SecModuleForms)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModuleForms_Modules");
            });

            modelBuilder.Entity<SecModuleFormAttachment>(entity =>
            {
                entity.ToTable("SEC_ModuleFormAttachments");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.SecModuleFormAttachments)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_SEC_ModuleFormAttachments_LT_DocTypes");

                entity.HasOne(d => d.ModuleForm)
                    .WithMany(p => p.SecModuleFormAttachments)
                    .HasForeignKey(d => d.ModuleFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_ModuleFormAttachments_SEC_ModuleForms");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.SecModuleFormAttachments)
                    .HasForeignKey(d => d.UploadedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_ModuleFormAttachments_SEC_Users");
            });

            modelBuilder.Entity<SecTitle>(entity =>
            {
                entity.ToTable("SEC_Titles");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SecUser>(entity =>
            {
                entity.ToTable("SEC_Users");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.SecUsers)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecUsers_SecContacts");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.SecUsers)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Groups");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SecUsers)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecUsers_LuStatus");
            });

            modelBuilder.Entity<SecUsersLogin>(entity =>
            {
                entity.ToTable("SEC_UsersLogin");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecUsersLogins)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersLogin_Users");
            });

            modelBuilder.Entity<SecUsersRefreshToken>(entity =>
            {
                entity.ToTable("SEC_UsersRefreshTokens");

                entity.Property(e => e.RefreshToken).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecUsersRefreshTokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_sec_users_refresh_tokens_sec_users");
            });

            modelBuilder.Entity<SysExceptionLog>(entity =>
            {
                entity.ToTable("SYS_ExceptionLogs");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.PageName).IsRequired();

                entity.Property(e => e.StackTrace).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SysExceptionLogs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ExceptionLogs_Users");
            });

            modelBuilder.Entity<SysSetting>(entity =>
            {
                entity.ToTable("SYS_Settings");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}